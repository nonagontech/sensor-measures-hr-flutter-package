// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/sensor_measures_hr_flutter_package.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class SensorMeasuresHrFlutterPackageBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SensorMeasuresHrFlutterPackageBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SensorMeasuresHrFlutterPackageBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// @brief 计算心率（简化示例，不是完整算法）
  /// @param data 指向数据数组的指针
  /// @param size 数据数组的大小（即数据点的数量）
  /// @param fs 采样频率（每秒采样点数）
  /// @return int 返回的心率值
  int hr_algorithim_lib(
    ffi.Pointer<ffi.Double> data,
    int size,
    int fs,
  ) {
    return _hr_algorithim_lib(
      data,
      size,
      fs,
    );
  }

  late final _hr_algorithim_libPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Double>, ffi.Int, ffi.Int)>>('hr_algorithim_lib');
  late final _hr_algorithim_lib = _hr_algorithim_libPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, int, int)>();

  /// @brief FIR滤波器（简化示例，不是完整算法）
  /// @param input 输入信号的一个样本值
  /// @return double 返回经过“滤波”后的输出值
  double fir_filter_lib(
    double input,
  ) {
    return _fir_filter_lib(
      input,
    );
  }

  late final _fir_filter_libPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'fir_filter_lib');
  late final _fir_filter_lib =
      _fir_filter_libPtr.asFunction<double Function(double)>();
}
